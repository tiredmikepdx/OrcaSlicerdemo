#!/usr/bin/env python3
"""
Simple test script to verify the gcode_nonplanar_modulation.py script works correctly.
"""
import os
import sys
import tempfile
import subprocess

# Add the scripts directory to the path
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, script_dir)

# Import the modulation script
from gcode_nonplanar_modulation import PERIODIC_FUNCTIONS
import math

def test_wave_functions():
    """Test that all wave functions work correctly."""
    print("Testing wave functions...")
    
    test_values = [0, math.pi/4, math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]
    
    for func_name, func in PERIODIC_FUNCTIONS.items():
        print(f"  Testing {func_name} wave...")
        try:
            for x in test_values:
                result = func(x)
                assert -2 <= result <= 2, f"{func_name}({x}) = {result} is out of expected range [-2, 2]"
            print(f"  ✓ {func_name} wave function works correctly")
        except Exception as e:
            print(f"  ✗ {func_name} wave function failed: {e}")
            return False
    
    return True

def test_script_execution():
    """Test that the script executes without errors."""
    print("Testing script execution...")
    
    # Create a simple test G-code file
    test_gcode = """
; Generated by OrcaSlicer
G1 Z0.2 F3000
;TYPE:External perimeter
G1 X10 Y10 E0.1 F1800
G1 X20 Y10 E0.2 F1800
;TYPE:Internal infill  
G1 X10 Y15 E0.3 F1800
G1 X20 Y15 E0.4 F1800
"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.gcode', delete=False) as f:
        f.write(test_gcode)
        temp_file = f.name
    
    try:
        # Test different combinations
        test_cases = [
            ['-include-infill', '-infill-amplitude', '0.1'],
            ['-include-external-perimeters', '-wall-amplitude', '0.1'],
            ['-include-infill', '-include-external-perimeters', '-infill-function', 'triangle'],
            ['-include-infill', '-infill-function', 'sawtooth', '-resolution', '1.0'],
        ]
        
        script_path = os.path.join(script_dir, 'gcode_nonplanar_modulation.py')
        
        for i, args in enumerate(test_cases):
            print(f"  Testing case {i+1}: {' '.join(args)}")
            try:
                result = subprocess.run(
                    ['python3', script_path, temp_file] + args,
                    capture_output=True, text=True, cwd=script_dir
                )
                if result.returncode != 0:
                    print(f"  ✗ Test case {i+1} failed:")
                    print(f"    stdout: {result.stdout}")
                    print(f"    stderr: {result.stderr}")
                    return False
                else:
                    print(f"  ✓ Test case {i+1} passed")
            except Exception as e:
                print(f"  ✗ Test case {i+1} failed with exception: {e}")
                return False
        
        print("  ✓ All script execution tests passed")
        return True
        
    finally:
        # Clean up
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def main():
    """Run all tests."""
    print("Running G-code Non-Planar Modulation Script Tests")
    print("=" * 50)
    
    all_passed = True
    
    # Test wave functions
    if not test_wave_functions():
        all_passed = False
    
    print()
    
    # Test script execution
    if not test_script_execution():
        all_passed = False
    
    print()
    print("=" * 50)
    if all_passed:
        print("✓ All tests passed!")
        return 0
    else:
        print("✗ Some tests failed!")
        return 1

if __name__ == "__main__":
    sys.exit(main())