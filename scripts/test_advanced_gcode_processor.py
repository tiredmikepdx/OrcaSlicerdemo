#!/usr/bin/env python3
"""
Test script for the advanced G-code processor that combines wall shifting and non-planar infill.
"""
import os
import sys
import tempfile
import subprocess
import shutil

# Add the scripts directory to the path
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, script_dir)

def create_test_gcode():
    """Create a comprehensive test G-code file with multiple layers and types."""
    test_gcode = """; Generated by OrcaSlicer 1.8.0
; layer_height = 0.2
; first_layer_height = 0.2
G21 ; set units to millimeters
G90 ; use absolute coordinates
M83 ; use relative distances for extrusion
M104 S210 ; set extruder temp
M190 S60 ; set bed temp
G28 ; home all axes
G1 Z0.2 F3000 ; move to first layer height

;LAYER_CHANGE
;Z:0.2
;TYPE:External perimeter
G1 X10 Y10 E0.1 F1800
G1 X20 Y10 E0.2 F1800
G1 X20 Y20 E0.3 F1800
G1 X10 Y20 E0.4 F1800
G1 X10 Y10 E0.5 F1800

;TYPE:Perimeter
G1 X12 Y12 E0.6 F1800
G1 X18 Y12 E0.7 F1800
G1 X18 Y18 E0.8 F1800
G1 X12 Y18 E0.9 F1800
G1 X12 Y12 E1.0 F1800

;TYPE:Internal infill
G1 X11 Y15 E1.1 F1800
G1 X19 Y15 E1.2 F1800
G1 X15 Y13 E1.3 F1800
G1 X15 Y17 E1.4 F1800

;LAYER_CHANGE
G1 Z0.4 F3000
;Z:0.4
;TYPE:External perimeter
G1 X10 Y10 E1.5 F1800
G1 X20 Y10 E1.6 F1800
G1 X20 Y20 E1.7 F1800
G1 X10 Y20 E1.8 F1800
G1 X10 Y10 E1.9 F1800

;TYPE:Inner wall
G1 X12 Y12 E2.0 F1800
G1 X18 Y12 E2.1 F1800
G1 X18 Y18 E2.2 F1800
G1 X12 Y18 E2.3 F1800
G1 X12 Y12 E2.4 F1800

;TYPE:Solid infill
G1 X11 Y11 E2.5 F1800
G1 X19 Y11 E2.6 F1800
G1 X19 Y19 E2.7 F1800
G1 X11 Y19 E2.8 F1800

;LAYER_CHANGE
G1 Z0.6 F3000
;Z:0.6
;TYPE:Outer wall
G1 X10 Y10 E2.9 F1800
G1 X20 Y10 E3.0 F1800
G1 X20 Y20 E3.1 F1800
G1 X10 Y20 E3.2 F1800
G1 X10 Y10 E3.3 F1800

;AFTER_LAYER_CHANGE
"""
    return test_gcode

def test_script_basic_functionality():
    """Test basic script functionality with different parameter combinations."""
    print("Testing basic script functionality...")
    
    script_path = os.path.join(script_dir, 'advanced_gcode_processor.py')
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.gcode', delete=False) as f:
        f.write(create_test_gcode())
        temp_file = f.name
    
    try:
        test_cases = [
            # Basic wall shifting only
            ['-extrusionMultiplier', '1.2'],
            
            # Wall shifting with reordering disabled
            ['-extrusionMultiplier', '1.1', '-wallReorder', '0'],
            
            # Non-planar infill only
            ['-nonPlanar', '1', '-amplitude', '0.3', '-frequency', '1.5'],
            
            # Combined functionality
            ['-extrusionMultiplier', '1.1', '-nonPlanar', '1', '-amplitude', '0.2'],
            
            # All features enabled
            ['-extrusionMultiplier', '1.2', '-nonPlanar', '1', '-wallReorder', '1', '-amplitude', '0.4', '-frequency', '2.0'],
        ]
        
        for i, args in enumerate(test_cases):
            print(f"  Testing case {i+1}: {' '.join(args)}")
            
            # Make a copy of the test file for each test
            test_file = f"{temp_file}_{i}"
            shutil.copy2(temp_file, test_file)
            
            try:
                result = subprocess.run(
                    ['python3', script_path, test_file] + args,
                    capture_output=True, text=True, cwd=script_dir
                )
                if result.returncode != 0:
                    print(f"  ✗ Test case {i+1} failed:")
                    print(f"    stdout: {result.stdout}")
                    print(f"    stderr: {result.stderr}")
                    return False
                else:
                    # Check that the file was modified
                    with open(test_file, 'r') as f:
                        modified_content = f.read()
                    if 'Shifted Z for block' in modified_content or 'Correction factor' in modified_content:
                        print(f"  ✓ Test case {i+1} passed (file was modified)")
                    else:
                        print(f"  ✓ Test case {i+1} passed (no modification expected)")
                
                # Clean up test file
                os.unlink(test_file)
                
            except Exception as e:
                print(f"  ✗ Test case {i+1} failed with exception: {e}")
                return False
        
        print("  ✓ All basic functionality tests passed")
        return True
        
    finally:
        # Clean up main test file
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def test_layer_height_detection():
    """Test that layer height detection works correctly."""
    print("Testing layer height detection...")
    
    test_gcode_with_layer_height = """; Generated by OrcaSlicer
; layer_height = 0.15
G1 Z0.15 F3000
;TYPE:External perimeter
G1 X10 Y10 E0.1 F1800
"""
    
    script_path = os.path.join(script_dir, 'advanced_gcode_processor.py')
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.gcode', delete=False) as f:
        f.write(test_gcode_with_layer_height)
        temp_file = f.name
    
    try:
        result = subprocess.run(
            ['python3', script_path, temp_file, '-extrusionMultiplier', '1.0'],
            capture_output=True, text=True, cwd=script_dir
        )
        
        if result.returncode != 0:
            print(f"  ✗ Layer height detection test failed:")
            print(f"    stdout: {result.stdout}")
            print(f"    stderr: {result.stderr}")
            return False
        
        # Check log file for layer height detection
        log_file = os.path.join(script_dir, "z_shift_log.txt")
        if os.path.exists(log_file):
            with open(log_file, 'r') as f:
                log_content = f.read()
            if "Detected layer height from G-code: 0.15mm" in log_content:
                print("  ✓ Layer height detection test passed")
                return True
            else:
                print("  ✗ Layer height not detected correctly in log")
                return False
        else:
            print("  ✗ Log file not created")
            return False
            
    finally:
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def test_argument_parsing():
    """Test that all command-line arguments are parsed correctly."""
    print("Testing argument parsing...")
    
    script_path = os.path.join(script_dir, 'advanced_gcode_processor.py')
    
    # Test help output
    try:
        result = subprocess.run(
            ['python3', script_path, '--help'],
            capture_output=True, text=True, cwd=script_dir
        )
        
        if result.returncode == 0 and 'extrusionMultiplier' in result.stdout:
            print("  ✓ Help output contains expected parameters")
        else:
            print("  ✗ Help output test failed")
            return False
            
    except Exception as e:
        print(f"  ✗ Argument parsing test failed: {e}")
        return False
    
    print("  ✓ Argument parsing test passed")
    return True

def main():
    """Run all tests."""
    print("Running Advanced G-code Processor Tests")
    print("=" * 50)
    
    all_passed = True
    
    # Test argument parsing
    if not test_argument_parsing():
        all_passed = False
    
    print()
    
    # Test layer height detection
    if not test_layer_height_detection():
        all_passed = False
    
    print()
    
    # Test basic functionality
    if not test_script_basic_functionality():
        all_passed = False
    
    print()
    print("=" * 50)
    if all_passed:
        print("✓ All tests passed!")
        return 0
    else:
        print("✗ Some tests failed!")
        return 1

if __name__ == "__main__":
    sys.exit(main())